All contributions, bug reports, bug fixes, documentation improvements, enhancements and ideas are welcome.
A detailed overview on how to contribute can be found in the contributing guide.
There is also an overview on GitHub.
If you are simply looking to start working with the pandas codebase, navigate to the GitHub "issues" tab and start looking through interesting issues.
There are a number of issues listed under Docs and good first issue where you could start out.
You can also triage issues which may include reproducing bug reports, or asking for vital information such as version numbers or reproduction instructions.
If you would like to start triaging issues, one easy way to get started is to subscribe to pandas on CodeTriage.
Or maybe through using pandas you have an idea of your own or are looking for something in the documentation and thinking ‘this can be improved’..you can do something about it!
Feel free to ask questions on the mailing list or on Gitter.
Seaborn development takes place on Github.
Please submit any reproducible bugs you encounter to the issue tracker.
CONTRIBUTING: how to contribute to the project.
MAINTAINERS: an ordered list of project maintainers.
CHARTER: open source project charter.
CODE_OF_CONDUCT: Code of conduct for contributors.
Please review the Contribution to Spark guide for information on how to get started contributing to the project.
Fork and Contribute.
This is an active open-source project.
We are always open to people who want to use the system or contribute to it.
Contact us if you are looking for implementation tasks that fit your skills.
This article describes how to contribute to Apache Flink.
Contributing.
See CONTRIBUTING for details on submitting patches and the contribution workflow.
How can I contribute?
Take a look at issues with tag called Good first issue or Help wanted.
Join the discussion on mailing list, subscription guide.
Answer questions on issues.
Fix bugs reported on issues, and send us pull request.
Review the existing pull request.
Improve the website, typically we need.
blog post.
translation on documentation.
use cases about how Dubbo is being used in enterprise system.
Improve the dubbo-admin/dubbo-monitor.
Contribute to the projects listed in ecosystem.
Any form of contribution that is not mentioned above.
If you would like to contribute, please send an email to dev@dubbo.apache.org to let us know!
Getting Involved and Contributing.
Interested in helping out with Apache CloudStack?
Great!
We welcome participation from anybody willing to work The Apache Way and make a contribution.
Note that you do not have to be a developer in order to contribute to Apache CloudStack.
We need folks to help with documentation, translation, promotion etc.
See our contribution page.
If you're interested in learning more or participating in the Apache CloudStack project, the mailing lists are the best way to do that.
While the project has several communications channels, the mailing lists are the most active and the official channels for making decisions about the project itself.
Mailing lists.
Development Mailing List.
Users Mailing List.
Commits Mailing List.
Issues Mailing List.
Marketing Mailing List.
IRC, join us on irc.freenode.net on.
#cloudstack: General Apache CloudStack conversation and end user support.
#cloudstack-dev: Development discussions.
Report and/or check bugs on JIRA and check our developer page for contributing code.
Contributing
Please see CONTRIBUTING for more info.
Who Maintains Apache Airflow?
Airflow is the work of the community, but the core committers/maintainers are responsible for reviewing and merging PRs as well as steering conversation around new feature requests.
If you would like to become a maintainer, please review the Apache Airflow committer requirements.
Contributing
Want to help build Apache Airflow?
Check out our contributing documentation.
Contact Us.
To get involved in Apache Beam.
Subscribe or mail the user@beam.apache.org list.
Subscribe or mail the dev@beam.apache.org list.
Report issues on JIRA.
We also have a contributor's guide.
We welcome contributions, and encourage you to get involved in the CXF community.
If you'd like to learn more about how you can contribute, please see: http://cxf.apache.org/getting-involved.html
Starring repositories lets maintainers know you appreciate their work and helps you track projects you don’t contribute to.
Watch repositories to get notifications when someone opens an issue or submits a pull request.
Contributions.
Spread the word.
Open pull requests.
Reach out with any feedback.
Contributing.
We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!
We ask that before you start work on a feature that you would like to contribute, please file an issue describing your proposed change: We will be happy to work with you to figure out the best approach, provide guidance and mentorship throughout feature development, and help avoid any wasted or duplicate effort.
👉 Remember!
Your contributions may be incorporated into future versions of Windows!
Because of this, all pull requests will be subject to the same level of scrutiny for quality, coding standards, performance, globalization, accessibility, and compatibility as those of our internal contributors.
⚠ Note: The Command-Line Team is actively working out of this repository and will be periodically re-structuring the code to make it easier to comprehend, navigate, build, test, and contribute to, so DO expect significant changes to code layout on a regular basis.
Debugging
To debug in VS, right click on CascadiaPackage (from VS Solution Explorer) and go to properties, in the Debug menu, change "Application process" and "Background task process" to "Native Only"
Repo for counting stars and contributing.
For law professionals or anyone who is willing to contribute to future version directly, please go to Anti-996-License-1.0.
Thank you.
For guidance on setting up a development environment and how to make a contribution to Flask, see the contributing guidelines.
Donate.
The Pallets organization develops and supports Flask and the libraries it uses.
In order to grow the community of contributors and users, and allow the maintainers to devote more time to the projects, please donate today.
We're happy to meet new contributors.
If you want to get involved with Leaflet development, check out the contribution guide.
Contributing to pandas Open Source Helpers.
All contributions, bug reports, bug fixes, documentation improvements, enhancements and ideas are welcome.
A detailed overview on how to contribute can be found in the contributing guide.
There is also an overview on GitHub.
If you are simply looking to start working with the pandas codebase, navigate to the GitHub "issues" tab and start looking through interesting issues.
There are a number of issues listed under Docs and good first issue where you could start out.
You can also triage issues which may include reproducing bug reports, or asking for vital information such as version numbers or reproduction instruction.
If you would like to start triaging issues, one easy way to get started is to subscribe to pandas on CodeTriage.
Or maybe through using pandas you have an idea of your own or are looking for something in the documentation and thinking ‘this can be improved’..you can do something about it!
Feel free to ask questions on the mailing list or on Gitter.
Contribution guidelines
If you want to contribute to models, be sure to review the contribution guidelines.
How to Contribute
We welcome community contributions to nGraph.
If you have an idea for how to improve it.
Share your proposal via GitHub issues.
Ensure you can build the product and run all the examples with your patch.
In the case of a larger feature, create a test.
Submit a pull request.
We will review your contribution and, if any additional fixes or modifications are necessary, may provide feedback to guide you.
When accepted, your pull request will be merged to the repository.
Update CONTRIBUTING.md and include it in future releases.
Finally, create a pull request.
We'll then review and merge it.
In any case, thank you very much for your contributions!
Many contributors, including myself, are also not native speakers, so we may misread some parts.
Other editors will require external contributions.
Contributing to Black.
In terms of inspiration, Black is about as configurable as gofmt.
This is deliberate.
Bug reports and fixes are always welcome!
However, before you suggest a new feature or configuration knob, ask yourself why you want it.
If it enables better integration with some workflow, fixes an inconsistency, speeds things up, and so on - go for it!
On the other hand, if your answer is "because I don't like a particular formatting" then you're not ready to embrace Black yet.
Such changes are unlikely to get accepted.
You can still try but prepare to be disappointed.
More details can be found in CONTRIBUTING.
How to Contribute.
We welcome community contributions to nGraph.
If you have an idea for how to improve it.
Share your proposal via GitHub issues.
Ensure you can build the product and run all the examples with your patch.
In the case of a larger feature, create a test.
Submit a pull request.
We will review your contribution and, if any additional fixes or modifications are necessary, may provide feedback to guide you.
When accepted, your pull request will be merged to the repository.
To contribute to Django, check out https://docs.djangoproject.com/en/dev/internals/contributing/ for information about getting involved.
Contributing.
Please read through our contributing guidelines.
Included are directions for opening issues, coding standards, and notes on development.
Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests.
All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.
Editor preferences are available in the editor config for easy use in common text editors.
Read more and download plugins at https://editorconfig.org/.
Community.
Get updates on Bootstrap's development and chat with the project maintainers and community members.
Follow @getbootstrap on Twitter.
Read and subscribe to The Official Bootstrap Blog.
Join the official Slack room.
Chat with fellow Bootstrappers in IRC.
On the irc.freenode.net server, in the ##bootstrap channel.
Implementation help may be found at Stack Overflow (tagged bootstrap-4).
Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar.
delivery mechanisms for maximum discoverability.
How To Contribute.
Please read CONTRIBUTING.
If you're new to Github, welcome!
We've set up a separate document for our contribution guidelines.
Contributing to Node.js.
Contributing to the project.
Working Groups.
Strategic Initiatives.
You are welcome to contribute to this exciting project.
Please first check Issue lists for "help wanted" tag and comment the one you are interested.
We will assign the issue to you.
Fork the master branch and add your improvement/modification/fix.
Create a pull request to development branch and follow the pull request template PR template.
Automatic tests will be triggered.
Make sure all tests are passed.
Please make sure all added modules are accompanied with proper test functions.
To make sure the code has the same style and standard, please refer to abod.py, hbos.py, or feature_bagging.py for example.
You are also welcome to share your ideas by opening an issue or dropping me an email at zhaoy@cmu.edu :)
You are welcome to contribute to the Steppy library.
Please check CONTRIBUTING for more information.
You can learn more about using and contributing to CNTK with the following resources:
General documentation.
Python API documentation.
Evaluation documentation (C++, C#/.NET, Python, Java).
Manual.
Tutorials.
Examples.
Pretrained models.
Blog.
Presentations.
I happily welcome your contributions here!
Please adhere to contributing.md, when contributing code.
Pull requests that deviate from the contributing.md, could be labelled as invalid, and closed (without merging to master).
These best practices will ensure integrity, when revisions of code, or issues need to be reviewed.
Note: support, and philantropy can be inquired, to further assist with development.
Contribute to XGBoost.
XGBoost has been developed and used by a group of active community members.
Your help is very valuable to make the package better for everyone.
Checkout the Community Page.
How to contribute
Please subscribe to our development mailing list dev-subscribe@singa.incubator.apache.org.
If you find any issues using SINGA, please report it to the Issue Tracker.
You can also contact with SINGA committers directly.
More details on contributing to SINGA is described here .
Thanks to all our contributing authors, including (in chronological order):
We would like to thank the Python community for building an amazing architecture.
We would like to thank the statistics community for building an amazing architecture.
b"# Contributing.
Your contributions are always welcome!.
## Guidelines.
* Add one link per Pull Request.
* Make sure the PR title is in the format of `Add project-name`.
* Write down the reason why the library is awesome.
* Add the link: `* [project-name](http://example.com/) - A short description ends with a period.`
 * Keep descriptions concise.
* Add a section if needed.
* Add the section description.
* Add the section title to Table of Contents.
* Search previous Pull Requests or Issues before making a new one, as yours may be a duplicate.
* Don't mention `Python` in the description as it's implied.
* Check your spelling and grammar.
* Remove any trailing whitespace.
".
Contributing
============.
Contributions are welcome!.
**Please carefully read this page to make the code review process go as smoothly as possible and to maximize the likelihood of your contribution being merged.**.
## Bug Reports.
For bug reports or requests [submit an issue](https://github.com/donnemartin/system-design-primer/issues).
## Pull Requests.
The preferred way to contribute is to fork the
[main repository](https://github.com/donnemartin/system-design-primer) on GitHub.
1.
Fork the [main repository](https://github.com/donnemartin/system-design-primer).
Click on the \'Fork\' button near the top of the page.
This creates a copy of the code under your account on the GitHub server.
2.
Clone this copy to your local disk:.
$ git clone git@github.com:YourLogin/system-design-primer.git
 $ cd system-design-primer.
3.
Create a branch to hold your changes and start making changes.
Don\'t work in the `master` branch!.
$ git checkout -b my-feature.
4.
Work on this copy on your computer using Git to do the version control.
When you\'re done editing, run the following to record your changes in Git:.
$ git add modified_files
 $ git commit.
5.
Push your changes to GitHub with:.
$ git push -u origin my-feature.
6.
Finally, go to the web page of your fork of the `system-design-primer` repo and click \'Pull Request\' to send your changes for review.
### GitHub Pull Requests Docs.
If you are not familiar with pull requests, review the [pull request docs](https://help.github.com/articles/using-pull-requests/).
## Translations.
We\'d like for the guide to be available in many languages.
Here is the process for maintaining translations:.
* This original version and content of the guide is maintained in English.
* Translations follow the content of the original.
Unfortunately, contributors must speak at least some English, so that translations do not diverge.
* Each translation has a maintainer to update the translation as the original evolves and to review others\' changes.
This doesn\'t require a lot of time, but review by the maintainer is important to maintain quality.
### Changes to translations.
* Changes to content should be made to the English version first, and then translated to each other language.
* Changes that improve translations should be made directly on the file for that language.
PRs should only modify one language at a time.
* Submit a PR with changes to the file in that language.
Each language has a maintainer, who reviews changes in that language.
Then the primary maintainer @donnemartin merges it in.
* Prefix PRs and issues with language codes if they are for that translation only, e.g.
"es: Improve grammar", so maintainers can find them easily.
### Adding translations to new languages.
Translations to new languages are always welcome, especially if you can maintain the translation!.
* Check existing issues to see if a translation is in progress or stalled.
If so, offer to help.
* If it is not in progress, file an issue for your language so people know you are working on it and we can arrange.
Confirm you are native level in the language and are willing to maintain the translation, so it\'s not orphaned.
* To get it started, fork the repo, then submit a PR with the single file README-xx.md added, where xx is the language code.
Use standard [IETF language tags](https://www.w3.org/International/articles/language-tags/), i.e.
the same as is used by Wikipedia, *not* the code for a single country.
These are usually just the two-letter lowercase code, for example, `fr` for French and `uk` for Ukrainian (not `ua`, which is for the country).
For languages that have variations, use the shortest tag, such as `zh-Hant`.
* Invite friends to review if possible.
If desired, feel free to invite friends to help your original translation by letting them fork your repo, then merging their PRs.
* Add links to your translation at the top of every README*.md file.
(For consistency, the link should be added in alphabetical order by ISO code, and the anchor text should be in the native language.)
* When done, indicate on the PR that it\'s ready to be merged into the main repo.
* Once accepted, your PR will be squashed into a single commit into the `master` branch.
### Translation template credits.
Thanks to [The Art of Command Line](https://github.com/jlevy/the-art-of-command-line) for the translation template.
b"# Contributing guidelines.
If you have created a model and would like to publish it here, please send us a
pull request.
For those just getting started with pull requests, GitHub has a
[howto](https://help.github.com/articles/using-pull-requests/).
The code for any model in this repository is licensed under the Apache License
In order to accept our code, we have to make sure that we can publish your code:
You have to sign a Contributor License Agreement (CLA).
We appreciate all contributions.
A non-exhaustive but growing list needs to mention: Trevor Killeen, Sasank Chilamkurthy, Sergey Zagoruyko, Adam Lerer, Francisco Massa, Alykhan Tejani, Luca Antiga, Alban Desmaison, Andreas Kopf, James Bradbury, Zeming Lin, Yuandong Tian, Guillaume Lample, Marat Dukhan, Natalia Gimelshein, Christian Sarofeen, Martin Raison, Edward Yang, Zachary Devito.
### How to contribute #### What to contribute?
Please contribute if you find any bug in xLearn.
Contribute to the documents to make it clearer for everyone.
Open issue if you met problems during development.
File a new issue or submit a new pull request if you have some code you'd like to contribute.
Development Want to contribute?
Contributing Please read through our contributing guidelines.
Contributors Check the list of contributors.
You can suggest us of new improvements you want by creating new Issue here.
Contributors: - Akarsha Sehwag (@aksh98) - Kushagra Arora (@kushagra7589)
In your commit messages, refer to this issue.
Community Slack — Come join almost a thousand members discussing the future of the project.
Special Thanks All the amazing contributors❤️.
Contributing Contributions are welcome!
Contributing Want to help build Compose?
Check out our contributing documentation.
Contributions are most welcome!
Many thanks for your participation!!
We need your support!
Thanks everybody for contributing.
Contributing is always welcome.
Thank you to all contributors!
Check out our contributing documentation.
Bug Reports, GitHub Issue Tracker, 🎁 Feature Requests| GitHub Issue Tracker, 👩‍💻 Usage Questions, Stack Overflow, Gitter Chat, Reddit User Group, 🗯 General Discussion, Gitter Chat, Reddit User 
Acknowledgements We thank Jaakko Lehtinen, David Luebke, and Tuomas Kynkäänniemi for in-depth discussions and helpful comments; Janne Hellsten, Tero Kuosmanen, and Pekka Jänis for compute infrastructure and help with the code release.
If you're a Python or Django developer, fork the repo and get stuck in!
Take a look at the data files in the chatterbot-corpus package if you are interested in contributing.
Thanks to some awesome contributers , packaging Gooey as an executable is super easy.
Contributions of additional training data or training data in other languages would be greatly appreciated.
Create a fork of the main ChatterBot repository on GitHub.
Related Projects List of known projects that fork or use changes from ungoogled-chromium
The development of Mailpile is funded by a large community of backers.
ow to Contribute You are welcome to contribute to the project as follow: fork project and commit pull requests, add/edit wiki, report/fix issue code review, commit new feature, add testcase.
Contributing See guidelines for contributing here.
Contributing Interested in contributing to Deis?
Contributions to Gixy are always welcome!
There are tasks for contributors of all experience levels.
How to setup my contributor environment?
To learn more about who specifically contributed to this codebase, see our contributors page.
Please use Rasa Community Forum for quick answers to questions.
Visit our contributor guidelines for additional details.
To correct this table, please create a new issue.
For more details, see the file CONTRIBUTING.md.
Thanks for your interest in contributing!
Faster R-CNN was initially described in an  arXiv tech report  and was subsequently published in NIPS 2015.
It results in faster (~ 1.5x speedup) training times and similar detection accuracy.
We should have awe-inspiring speed and crazy-good compression.
Contributions are welcome.
Visit our  contributor guidelines  for additional details.
Please use  Rasa Community Forum  for quick answers to questions.
Community : Discord Chat
Issue Tracking Marathon uses JIRA to track issues, so please, going forward please use JIRA always.
Contributors are usually available to field questions, give advice and discuss ideas on the Gitter channel , and for people wanting to take their first steps at contributing we have a selection of open issues flagged up as being good candidates to take on.
Authors Marathon was created by Tobias Knaup and Florian Leibert and continues to be developed by the team at Mesosphere and by many contributors from the community.
There wasn't enough contribution to warrant keeping it in Java The packages were all namespaced under a person's name and not the company's name Scala is more fun  Issues It was a pretty fast Java to Scala port so lots of the nicities of the Scala language aren't in the codebase yet.
Become a member of the community by contributing to our codebase.
You can find more plugins made by the community at GitBucket community plugins.
We are committed to providing a friendly, safe and welcoming environment for all, and ask that the community adhere to the Scala Code of Conduct.
Also be sure to check out the community wiki for the chapter notes , links to more reading, and more.
Contributing We feel that a welcoming community is important and we ask that you follow Twitter's Open Source Code of Conduct in all interactions with the community.
See CONTRIBUTING.md for info on contributing changes.
Community Prisma has a community of thousands of amazing developers and contributors.
See CONTRIBUTING.md for contribution guidelines.
Community help with keeping the build working on Windows is appreciated.
Community You can join these groups and chats to discuss and ask Akka related questions:  Forums: discuss.akka.io Chat room about using Akka: Issue tracker: In addition to that, you may enjoy following:  The news section of the page, which is updated whenever a new version is released The Akka Team Blog @akkateam on Twitter Questions tagged #akka on StackOverflow Projects built with Akka!
Get help on Stack Overflow Community Gitter Chat Contributors Gitter!
We are committed to providing a friendly, safe and welcoming environment for all, and ask that the community adhere to the Scala Code of Conduct.
To request a community build run on your PR, just ask in a comment on the PR and a Scala team member (probably @SethTisue) will take care of it.
Contributing We feel that a welcoming community is important and we ask that you follow Twitter's Open Source Code of Conduct in all interactions with the community.
Community builds run on the Scala Jenkins instance.
Questions or need help?Ask the community!
See the scala/community-builds repo.
The project uses Slack to facilitate conversation in our community.
We welcome contributions to Delta Lake.
Refer to the CONTRIBUTING.md file for more details about the workflow, and general hints on how to prepare your pull request.
You can also ask for clarifications or guidance in GitHub issues directly, or in the akka/dev chat if a more real time communication would be of benefit.
If you are interested in contributing, please visit the community page for ways in which you can help.
We feel that a welcoming community is important and we ask that you follow Twitter's Open Source Code of Conduct in all interactions with the community.
This guide document introduce how to contribute to CarbonData.
You can also contact the community for getting answers.
We monitor channels listed below for comments/questions.
Support Any problem? Contact us for help.
Forum for a high-level discussion with the wider community before implementation.
Sign up for our Community Newsletter to get regular tips, learn about other use-cases and get alerted of blogposts and tutorials about Realm.
For larger changes and feature ideas, we ask that you propose it on the unofficial Community Forum for a high-level discussion with the wider community before implementation.
Welcome contribute your amazing animation effect.
To contribute, you need to work with libGDX' sources directly, something normal users do not have to go through.
Contributing: Code Instructions on how to setup your development environment and build Signal can be found in BUILDING.md.
Before you open an issue or create a pull request, please read Contributing Guide first.
The terms of the license are as follows: The MIT License (MIT) Copyright (c) 2004 Kohsuke Kawaguchi, Sun Microsystems Inc., and a number of other contributors.
If you would like to contribute, please send an email to dev@dubbo.apache.org to let us know!
Thanks to Haase & Martin OHG for contributing the logo.
Contributers  craya1982  Thanks  Inspired by in daimajia.
How can I contribute? Answer questions on issues. Review the existing pull request. Reporting a security vulnerability Please report security vulnerability to us privately.
Glide is open source.
Think you found a bug? Open an issue.
Have a feature request? Open an issue.
Get involved in the community forum or check out the wiki!
For more details, see the Contributing docs page .
We have an ever-growing community of users and engine developers. 
The main community channels are listed on the homepage.
To get in touch with the developers, the best way is to join the IRC channel on Freenode.
To get started contributing to the project, see the contributing guide.
Please read the contribution guidelines before submitting a pull request.
This project exists thanks to all the people who contribute.